@model HeroesCup.Web.ClubsModule.Models.StoryEditModel
@inject IAuthorizationService Auth
@inject ManagerLocalizer Localizer
@inject HeroesCup.Localization.ManagerLocalizer HeroesCupLocalizer
@{
    ViewBag.Title = "Edit story";
    ViewBag.MenuItem = HeroesCupLocalizer.Story["Stories"];

    var missions = Model.Missions != null && Model.Missions.Count() > 0 ? Model.Missions.ToList() : new List<HeroesCup.Data.Models.Mission>();
    var missionsSelectList = new SelectList(missions, "Id", "Title");

    var heroes = Model.Heroes != null && Model.Heroes.Count() > 0 ? Model.Heroes.ToList() : new List<HeroesCup.Data.Models.Hero>();
    var heroesMultipleSelectList = new MultiSelectList(heroes, "Id", "Name");
    foreach (var heroSelectItem in heroesMultipleSelectList)
    {
        if (Model.HeroesIds.Contains(Guid.Parse(heroSelectItem.Value)))
        {
            heroSelectItem.Selected = true;
        }
    }

    var heroesSelectList = new SelectList(heroes, "Id", "Name");

    var noMissionWithoutStory = Model.Missions == null || !Model.Missions.Any();

    if (Model.Story.Mission == null)
    {
        Model.Story.Mission = Model.Story.MissionId != Guid.Empty ? missions.FirstOrDefault(m => m.Id == Model.Story.MissionId) : missions.FirstOrDefault();
    }
}

@section script {
    <script src="/manager/clubsmodule/js/summernote-editor.js" type="text/javascript"></script>

    @*<link src="http://cdn.rawgit.com/davidstutz/bootstrap-multiselect/master/dist/css/bootstrap-multiselect.css" rel="stylesheet" type="text/css" />*@
    <script src="https://cdn.rawgit.com/davidstutz/bootstrap-multiselect/master/dist/js/bootstrap-multiselect.js" type="text/javascript"></script>
    <script src="/manager/clubsmodule/js/multiselect.js"></script>

    <script src="/manager/clubsmodule/js/story-modal.js"></script>
    <script src="/manager/clubsmodule/js/validation-modal.js"></script>
}

@if (noMissionWithoutStory)
{
    var validationModal = new HeroesCup.Web.ClubsModule.Models.ValidationModal()
    {
        Title = HeroesCupLocalizer.Story["NoMissionsModalTitle"],
        Body = HeroesCupLocalizer.Story["NoMissionsModalBody"]
    };
    <!-- Modal -->
    <partial name="_ValidationModal" model="validationModal" />
}

@using (var form = Html.BeginForm("Save", "Stories", FormMethod.Post, new { @class = "form validate", role = "form", novalidate = "", enctype = "multipart/form-data" }))
{
    @Html.HiddenFor(m => m.Story.Id)
    @Html.HiddenFor(m => m.ImageIds)
    @Html.HiddenFor(m => m.Story.Mission.Title)

    <div class="top">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item">@HeroesCupLocalizer.Mission["Missions"]</li>
                <li class="breadcrumb-item" aria-current="page"><a href="@Url.Action("List")">@HeroesCupLocalizer.Story["Stories"]</a></li>
                <li class="breadcrumb-item active" aria-current="page">@Localizer.General["Edit"]</li>
            </ol>
        </nav>

        <div class="container-fluid">
            <div class="top-nav">
                @if ((await Auth.AuthorizeAsync(User, HeroesCup.Web.ClubsModule.Permissions.StoriesSave)).Succeeded)
                {
                    <button type="submit" class="btn btn-labeled btn-success pull-right">
                        <span class="btn-label">
                            <i class="fas fa-check"></i>
                        </span>
                        @Localizer.General["Save"]
                    </button>
                }

                @if ((await Auth.AuthorizeAsync(User, HeroesCup.Web.ClubsModule.Permissions.StoriesPublish)).Succeeded && Model.Story.Id != Guid.Empty)
                {
                    @if (Model.Story.IsPublished == false)
                    {
                        <button asp-action="Publish" class="btn btn-labeled btn-success pull-right">
                            <span class="btn-label">
                                <i class="fas fa-check"></i>
                            </span>
                            @Localizer.General["Publish"]
                        </button>
                    }
                    else
                    {
                        <div class="btn-group" role="group">
                            <button type="button" class="btn btn-success dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"></button>
                            <div class="dropdown-menu dropdown-menu-right" aria-labelledby="btnGroupDrop1">
                                <button asp-action="Unpublish" class="dropdown-item" href="#"><i class="fas fa-undo"></i> @Localizer.General["Unpublish"]</button>
                            </div>
                        </div>
                    }
                }

            </div>
        </div>
    </div>

    <div class="container-fluid">
        <div class="card">
            <div class="card-header">
                <span class="title">@Localizer.General["General"]</span>
            </div>
            <div class="card-body">

                <div class="row">
                    <div class="col-sm-6">
                        <div class="form-group">
                            <label>@HeroesCupLocalizer.Mission["Mission"]</label>
                            @if (Model.Story.Id != Guid.Empty)
                            {
                                @Html.TextBoxFor(m => m.Story.Mission.Title, new { @class = "form-control misson-field", disabled = true })
                            }
                            else
                            {
                                @Html.DropDownListFor(m => m.Story.MissionId, missionsSelectList, new { @class = "form-control misson-field", required = "" })
                            }

                            @Html.HiddenFor(m => m.Story.MissionId)
                            <div class="invalid-feedback">
                                @HeroesCupLocalizer.General["Mandatory field"]
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-12">
                        <div class="form-group">
                            <label>@HeroesCupLocalizer.General["Content"]</label>
                            @Html.TextAreaFor(m => m.Story.Content, new { @class = "form-control small editor", @id = "editor", required = "" })
                            <div class="invalid-tooltip">
                                @HeroesCupLocalizer.General["Mandatory field"]
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-sm-6">
                        <div class="form-group">
                            <label>@HeroesCupLocalizer.Mission["DurationInHours"]</label>
                            <p class="small">@HeroesCupLocalizer.Mission["DurationInHoursSuggestion"]</p>
                            @Html.TextBoxFor(m => m.Story.Mission.DurationInHours, new { @class = "form-control small", @type = "number" })
                        </div>
                    </div>

                    <div class="col-sm-6">
                        <div class="form-group">
                            <label>@HeroesCupLocalizer.Hero["Heroes"]</label>
                            <p class="small">@HeroesCupLocalizer.Mission["Heroes Hint"]</p>
                            @Html.ListBoxFor(m => m.HeroesIds, heroesMultipleSelectList, new { @class = "multiselect form-control", multiple = "multiple", @id = "heroes" })
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-sm-12">
                        <div class="form-group">
                            <label>@HeroesCupLocalizer.General["Images"]</label>
                            <div class="row col-12">

                                @if (Model.ImageIds != null)
                                {
                                    foreach (var imageId in Model.ImageIds)
                                    {

                                        <div class="col-6 mb-1">
                                            <img src="/images/@imageId" alt="Story Image" width="200">
                                        </div>
                                    }
                                }
                                else
                                {
                                    <div class="col-6">
                                        <img src="~/manager/clubsmodule/images/no_image.png" width="200" alt="Story Image">
                                    </div>
                                }

                                <div class="col-6">
                                    <input type="file" multiple asp-for="UploadedImages" class="form-control-file" />
                                    @Html.ValidationMessageFor(model => model.UploadedImages, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <partial name="_ValidationModal" model="null" />
}
